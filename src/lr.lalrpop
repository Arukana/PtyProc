use std::str::FromStr; // LALRPOP pulls in dependencies just like in Rust.
use util;
//    <s:r"[-]?[0-9]+"> => util::Mouse::new( i32::from_str(s).unwrap() ),

grammar; // This marks the file as a grammar for LALRPOP to generate code for.

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
Nus: u16 = <s:r"[0-9]+"> => u16::from_str(s).unwrap();
Esc: i32 = <n:r"[\x1B-\x1B]"> => 27;
Tab: i32 = <n:r"[\x09-\x09]"> => 9;
Bell: i32 = <n:r"[\x07-\x07]"> => 7;
Car: i32 = <n:r"[\x0D-\x0D]"> => 13;
New: i32 = <n:r"[\x0A-\x0A]"> => 10;
Space: i32 = <n:r"[\x20-\x20]"> => 32;
Sup: i32 = <n:r"[\x7F-\x7F]"> => 127;
Quote: i32 = <n:r"[\x22-\x22]"> => 34;

Key: util::Key = {
    <s:r"[A-z]"> => util::Key::new(s.as_bytes()[0]),
    <s:r"[0-9]+"> => util::Key::new(s.as_bytes()[0]),
};

Mouse: util::Mouse = {
    <s:r"[0-9]+"> => util::Mouse::new( i32::from_str(s).unwrap() ),
};

pub KeysUse: (util::Key) = {

    <c:Key> => c,
    "m" => util::Key::Char(b'm'),
    "M" => util::Key::Char(b'M'),
    "!" => util::Key::Char(b'!'),
    <q:Quote> => util::Key::Char(34),
    <s:Space> => util::Key::Space,
    "#" => util::Key::Char(b'#'),
    "$" => util::Key::Char(b'$'),
    "%" => util::Key::Char(b'%'),
    "&" => util::Key::Char(b'&'),
    "'" => util::Key::Char(b'\''),
    "(" => util::Key::Char(b'\x28'),
    ")" => util::Key::Char(b'\x29'),
    "*" => util::Key::Char(b'*'),
    "+" => util::Key::Char(b'+'),
    "," => util::Key::Char(b','),
    "-" => util::Key::Char(b'-'),
    "." => util::Key::Char(b'.'),
    "/" => util::Key::Char(b'/'),
    ":" => util::Key::Char(b':'),
    ";" => util::Key::Char(b';'),
    "<" => util::Key::Char(b'<'),
    "=" => util::Key::Char(b'='),
    ">" => util::Key::Char(b'>'),
    "?" => util::Key::Char(b'?'),
    "@" => util::Key::Char(b'@'),
    "{" => util::Key::Char(123),
    "|" => util::Key::Char(b'|'),
    "}" => util::Key::Char(125),
    "~" => util::Key::Char(b'~'),

    <n:Esc> => util::Key::Esc,
    <t:Tab> => util::Key::Tab,
    <b:Bell> => util::Key::Bell,
    <c:Car> => util::Key::Carriage,
    <u:Sup> => util::Key::Backspace,
    <n:New> <c:Car> => util::Key::Enter,
    <c:Car> <n:New> => util::Key::Enter,
    <n:New> => util::Key::Enter,

    <n:Esc> "[A" => util::Key::Up,
    <n:Esc> "[B" => util::Key::Down,
    <n:Esc> "[C" => util::Key::Right,
    <n:Esc> "[D" => util::Key::Left,
    <n:Esc> "[F" => util::Key::End,

    <n:Esc> "[1;2A" => util::Key::ShiftUp,
    <n:Esc> "[1;2B" => util::Key::ShiftDown,
    <n:Esc> "[1;2C" => util::Key::ShiftRight,
    <n:Esc> "[1;2D" => util::Key::ShiftLeft,
    <n:Esc> "[1;2F" => util::Key::ShiftEnd,
    <n:Esc> "[1;2P" => util::Key::F(13),
    <n:Esc> "[1;2Q" => util::Key::F(14),
    <n:Esc> "[1;2R" => util::Key::F(15),
    <n:Esc> "[1;2S" => util::Key::F(16),

    <n:Esc> "[1;9A" => util::Key::AltUp,
    <n:Esc> "[1;9B" => util::Key::AltDown,
    <n:Esc> "[1;9C" => util::Key::AltRight,
    <n:Esc> "[1;9D" => util::Key::AltLeft,
    <n:Esc> "[1;9F" => util::Key::AltEnd,

    <n:Esc> "[1;5A" => util::Key::CtrlUp,
    <n:Esc> "[1;5B" => util::Key::CtrlDown,
    <n:Esc> "[1;5C" => util::Key::CtrlRight,
    <n:Esc> "[1;5D" => util::Key::CtrlLeft,
    <n:Esc> "[1;5F" => util::Key::CtrlEnd,

    <n:Esc> "[1;10A" => util::Key::AltShiftUp,
    <n:Esc> "[1;10B" => util::Key::AltShiftDown,
    <n:Esc> "[1;10C" => util::Key::AltShiftRight,
    <n:Esc> "[1;10D" => util::Key::AltShiftLeft,
    <n:Esc> "[1;10F" => util::Key::AltShiftEnd,

    <n:Esc> "[1;6A" => util::Key::CtrlShiftUp,
    <n:Esc> "[1;6B" => util::Key::CtrlShiftDown,
    <n:Esc> "[1;6C" => util::Key::CtrlShiftRight,
    <n:Esc> "[1;6D" => util::Key::CtrlShiftLeft,
    <n:Esc> "[1;6F" => util::Key::CtrlShiftEnd,

    <n:Esc> "[1;13F" => util::Key::CtrlAltEnd,
    <n:Esc> "[1;14F" => util::Key::CtrlAltShiftEnd,
    
    <n:Esc> "[3~" => util::Key::Delete,
    <n:Esc> "[5~" => util::Key::PageUp,
    <n:Esc> "[6~" => util::Key::PageDown,

    <n:Esc> "OP" => util::Key::F(1),
    <n:Esc> "OQ" => util::Key::F(2),
    <n:Esc> "OR" => util::Key::F(3),
    <n:Esc> "OS" => util::Key::F(4),

    <n:Esc> "[15~" => util::Key::F(5),
    <n:Esc> "[17~" => util::Key::F(6),
    <n:Esc> "[18~" => util::Key::F(7),
    <n:Esc> "[19~" => util::Key::F(8),
    <n:Esc> "[20~" => util::Key::F(9),
    <n:Esc> "[21~" => util::Key::F(10),
    <n:Esc> "[23~" => util::Key::F(11),
    <n:Esc> "[24~" => util::Key::F(12),

    <n:Esc> "[15;2~" => util::Key::ShiftF(5),
    <n:Esc> "[17;2~" => util::Key::ShiftF(6),
    <n:Esc> "[18;2~" => util::Key::ShiftF(7),
    <n:Esc> "[19;2~" => util::Key::ShiftF(8),
    <n:Esc> "[20;2~" => util::Key::ShiftF(9),
    <n:Esc> "[21;2~" => util::Key::ShiftF(10),
    <n:Esc> "[23;2~" => util::Key::ShiftF(11),
    <n:Esc> "[24;2~" => util::Key::ShiftF(12),

};

pub MouseUse: (util::Mouse, i32, i32) = {
    <n:Esc> "[<" <t:Mouse> ";" <x:Num> ";" <y:Num> "m" => (t, x, y),
    <n:Esc> "[<" <t:Mouse> ";" <x:Num> ";" <y:Num> "M" => (t, x, y),
};
