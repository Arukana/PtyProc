use ::prelude;
use ::libc;
use std::str::FromStr; // LALRPOP pulls in dependencies just like in Rust.

grammar; // This marks the file as a grammar for LALRPOP to generate code for.

NumExpr = r"[\x30-\x39]";
Num: libc::c_ushort = <s:NumExpr> => libc::c_ushort::from_str(s).unwrap();

BasicLatin: prelude::Char = {
  <d1: NumExpr>
    => prelude::Char::BasicLatin(
    [libc::c_uchar::from_str(d1).unwrap_or(0)]
  ),
  <d1:"[\x00-\x29]?[\x40-\x7f]">
    => prelude::Char::BasicLatin(
    [libc::c_uchar::from_str(d1).unwrap_or(0)]
  ),
};

Latin1Supplement: prelude::Char = {
  <d1:"[\xC2-\xC3]"> <d2:"[\x80-\xBF]">
    => prelude::Char::Latin1Supplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

LatinExtendedA: prelude::Char = {
  <d1:"[\xC4-\xC5]"> <d2:"[\x80-\xBF]">
    => prelude::Char::LatinExtendedA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

LatinExtendedB: prelude::Char = {
  <d1:"[\xC6-\xC9]"> <d2:"[\x80-\x8F]">
    => prelude::Char::LatinExtendedB(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

IpaExtensions: prelude::Char = {
  <d1:"[\xC9-\xCA]"> <d2:"[\x90-\xAF]">
    => prelude::Char::IpaExtensions(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

SpacingModifierLetters: prelude::Char = {
  <d1:"[\xCA-\xCB]"> <d2:"[\xB0-\xBF]">
    => prelude::Char::SpacingModifierLetters(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

CombiningDiacriticalMarks: prelude::Char = {
  <d1:"[\xCC-\xCD]"> <d2:"[\x80-\xAF]">
    => prelude::Char::CombiningDiacriticalMarks(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

GreekandCoptic: prelude::Char = {
  <d1:"[\xCD-\xCF]"> <d2:"[\xB0-\xBF]">
    => prelude::Char::GreekandCoptic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

Cyrillic: prelude::Char = {
  <d1:"[\xD0-\xD3]"> <d2:"[\x80-\xBF]">
    => prelude::Char::Cyrillic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

CyrillicSupplement: prelude::Char = {
  <d1:"[\xD4-\xD4]"> <d2:"[\x80-\xAF]">
    => prelude::Char::CyrillicSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

Armenian: prelude::Char = {
  <d1:"[\xD4-\xD6]"> <d2:"[\xB0-\x8F]">
    => prelude::Char::Armenian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

Hebrew: prelude::Char = {
  <d1:"[\xD6-\xD7]"> <d2:"[\x90-\xBF]">
    => prelude::Char::Hebrew(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

Arabic: prelude::Char = {
  <d1:"[\xD8-\xDB]"> <d2:"[\x80-\xBF]">
    => prelude::Char::Arabic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

Syriac: prelude::Char = {
  <d1:"[\xDC-\xDD]"> <d2:"[\x80-\x8F]">
    => prelude::Char::Syriac(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

ArabicSupplement: prelude::Char = {
  <d1:"[\xDD-\xDD]"> <d2:"[\x90-\xBF]">
    => prelude::Char::ArabicSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

Thaana: prelude::Char = {
  <d1:"[\xDE-\xDE]"> <d2:"[\x80-\xBF]">
    => prelude::Char::Thaana(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

NKo: prelude::Char = {
  <d1:"[\xDF-\xDF]"> <d2:"[\x80-\xBF]">
    => prelude::Char::NKo(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0)
    ]
  ),
};

Samaritan: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xA0-\xA0]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Samaritan(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Mandaic: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xA1-\xA1]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Mandaic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

ArabicExtendedA: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xA2-\xA3]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::ArabicExtendedA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Devanagari: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xA4-\xA5]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Devanagari(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Bengali: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xA6-\xA7]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Bengali(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Gurmukhi: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xA8-\xA9]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Gurmukhi(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Gujarati: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xAA-\xAB]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Gujarati(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Oriya: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xAC-\xAD]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Oriya(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Tamil: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xAE-\xAF]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Tamil(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Telugu: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xB0-\xB1]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Telugu(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Kannada: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xB2-\xB3]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Kannada(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Malayalam: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xB4-\xB5]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Malayalam(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Sinhala: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xB6-\xB7]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Sinhala(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Thai: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xB8-\xB9]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Thai(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Lao: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xBA-\xBB]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Lao(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Tibetan: prelude::Char = {
  <d1:"[\xE0-\xE0]"> <d2:"[\xBC-\xBF]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Tibetan(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Myanmar: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x80-\x82]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Myanmar(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Georgian: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x82-\x83]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::Georgian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

HangulJamo: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x84-\x87]"> <d3:"[\x80-\xBF]">
    => prelude::Char::HangulJamo(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Ethiopic: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x88-\x8D]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Ethiopic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

EthiopicSupplement: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x8E-\x8E]"> <d3:"[\x80-\x9F]">
    => prelude::Char::EthiopicSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Cherokee: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x8E-\x8F]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::Cherokee(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

UnifiedCanadianAboriginalSyllabics: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x90-\x99]"> <d3:"[\x80-\xBF]">
    => prelude::Char::UnifiedCanadianAboriginalSyllabics(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Ogham: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x9A-\x9A]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Ogham(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Runic: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x9A-\x9B]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::Runic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Tagalog: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x9C-\x9C]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Tagalog(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Hanunoo: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x9C-\x9C]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::Hanunoo(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Buhid: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x9D-\x9D]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Buhid(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Tagbanwa: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x9D-\x9D]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::Tagbanwa(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Khmer: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\x9E-\x9F]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Khmer(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Mongolian: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xA0-\xA2]"> <d3:"[\x80-\xAF]">
    => prelude::Char::Mongolian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

UnifiedCanadianAboriginalSyllabicsExtended: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xA2-\xA3]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::UnifiedCanadianAboriginalSyllabicsExtended(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Limbu: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xA4-\xA5]"> <d3:"[\x80-\x8F]">
    => prelude::Char::Limbu(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

TaiLe: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xA5-\xA5]"> <d3:"[\x90-\xBF]">
    => prelude::Char::TaiLe(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

NewTaiLue: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xA6-\xA7]"> <d3:"[\x80-\x9F]">
    => prelude::Char::NewTaiLue(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

KhmerSymbols: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xA7-\xA7]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::KhmerSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Buginese: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xA8-\xA8]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Buginese(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

TaiTham: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xA8-\xAA]"> <d3:"[\xA0-\xAF]">
    => prelude::Char::TaiTham(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CombiningDiacriticalMarksExtended: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xAA-\xAB]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::CombiningDiacriticalMarksExtended(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Balinese: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xAC-\xAD]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Balinese(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Sundanese: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xAE-\xAE]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Sundanese(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Batak: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xAF-\xAF]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Batak(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Lepcha: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xB0-\xB1]"> <d3:"[\x80-\x8F]">
    => prelude::Char::Lepcha(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

OlChiki: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xB1-\xB1]"> <d3:"[\x90-\xBF]">
    => prelude::Char::OlChiki(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

SundaneseSupplement: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xB3-\xB3]"> <d3:"[\x80-\x8F]">
    => prelude::Char::SundaneseSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

VedicExtensions: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xB3-\xB3]"> <d3:"[\x90-\xBF]">
    => prelude::Char::VedicExtensions(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

PhoneticExtensions: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xB4-\xB5]"> <d3:"[\x80-\xBF]">
    => prelude::Char::PhoneticExtensions(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

PhoneticExtensionsSupplement: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xB6-\xB6]"> <d3:"[\x80-\xBF]">
    => prelude::Char::PhoneticExtensionsSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CombiningDiacriticalMarksSupplement: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xB7-\xB7]"> <d3:"[\x80-\xBF]">
    => prelude::Char::CombiningDiacriticalMarksSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

LatinExtendedAdditional: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xB8-\xBB]"> <d3:"[\x80-\xBF]">
    => prelude::Char::LatinExtendedAdditional(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

GreekExtended: prelude::Char = {
  <d1:"[\xE1-\xE1]"> <d2:"[\xBC-\xBF]"> <d3:"[\x80-\xBF]">
    => prelude::Char::GreekExtended(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

GeneralPunctuation: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x80-\x81]"> <d3:"[\x80-\xAF]">
    => prelude::Char::GeneralPunctuation(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

SuperscriptsandSubscripts: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x81-\x82]"> <d3:"[\xB0-\x9F]">
    => prelude::Char::SuperscriptsandSubscripts(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CurrencySymbols: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x82-\x83]"> <d3:"[\xA0-\x8F]">
    => prelude::Char::CurrencySymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CombiningDiacriticalMarksforSymbols: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x83-\x83]"> <d3:"[\x90-\xBF]">
    => prelude::Char::CombiningDiacriticalMarksforSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

LetterlikeSymbols: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x84-\x85]"> <d3:"[\x80-\x8F]">
    => prelude::Char::LetterlikeSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

NumberForms: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x85-\x86]"> <d3:"[\x90-\x8F]">
    => prelude::Char::NumberForms(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Arrows: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x86-\x87]"> <d3:"[\x90-\xBF]">
    => prelude::Char::Arrows(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

MathematicalOperators: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x88-\x8B]"> <d3:"[\x80-\xBF]">
    => prelude::Char::MathematicalOperators(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

MiscellaneousTechnical: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x8C-\x8F]"> <d3:"[\x80-\xBF]">
    => prelude::Char::MiscellaneousTechnical(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

ControlPictures: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x90-\x90]"> <d3:"[\x80-\xBF]">
    => prelude::Char::ControlPictures(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

OpticalCharacterRecognition: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x91-\x91]"> <d3:"[\x80-\x9F]">
    => prelude::Char::OpticalCharacterRecognition(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

EnclosedAlphanumerics: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x91-\x93]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::EnclosedAlphanumerics(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

BoxDrawing: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x94-\x95]"> <d3:"[\x80-\xBF]">
    => prelude::Char::BoxDrawing(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

BlockElements: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x96-\x96]"> <d3:"[\x80-\x9F]">
    => prelude::Char::BlockElements(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

GeometricShapes: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x96-\x97]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::GeometricShapes(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

MiscellaneousSymbols: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x98-\x9B]"> <d3:"[\x80-\xBF]">
    => prelude::Char::MiscellaneousSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Dingbats: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x9C-\x9E]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Dingbats(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

MiscellaneousMathematicalSymbolsA: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x9F-\x9F]"> <d3:"[\x80-\xAF]">
    => prelude::Char::MiscellaneousMathematicalSymbolsA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

SupplementalArrowsA: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\x9F-\x9F]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::SupplementalArrowsA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

BraillePatterns: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xA0-\xA3]"> <d3:"[\x80-\xBF]">
    => prelude::Char::BraillePatterns(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

SupplementalArrowsB: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xA4-\xA5]"> <d3:"[\x80-\xBF]">
    => prelude::Char::SupplementalArrowsB(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

MiscellaneousMathematicalSymbolsB: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xA6-\xA7]"> <d3:"[\x80-\xBF]">
    => prelude::Char::MiscellaneousMathematicalSymbolsB(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

SupplementalMathematicalOperators: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xA8-\xAB]"> <d3:"[\x80-\xBF]">
    => prelude::Char::SupplementalMathematicalOperators(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

MiscellaneousSymbolsandArrows: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xAC-\xAF]"> <d3:"[\x80-\xBF]">
    => prelude::Char::MiscellaneousSymbolsandArrows(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Glagolitic: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xB0-\xB1]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Glagolitic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

LatinExtendedC: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xB1-\xB1]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::LatinExtendedC(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Coptic: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xB2-\xB3]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Coptic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

GeorgianSupplement: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xB4-\xB4]"> <d3:"[\x80-\xAF]">
    => prelude::Char::GeorgianSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Tifinagh: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xB4-\xB5]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::Tifinagh(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

EthiopicExtended: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xB6-\xB7]"> <d3:"[\x80-\x9F]">
    => prelude::Char::EthiopicExtended(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CyrillicExtendedA: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xB7-\xB7]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::CyrillicExtendedA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

SupplementalPunctuation: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xB8-\xB9]"> <d3:"[\x80-\xBF]">
    => prelude::Char::SupplementalPunctuation(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CJKRadicalsSupplement: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xBA-\xBB]"> <d3:"[\x80-\xBF]">
    => prelude::Char::CJKRadicalsSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

KangxiRadicals: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xBC-\xBF]"> <d3:"[\x80-\x9F]">
    => prelude::Char::KangxiRadicals(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

IdeographicDescriptionCharacters: prelude::Char = {
  <d1:"[\xE2-\xE2]"> <d2:"[\xBF-\xBF]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::IdeographicDescriptionCharacters(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CJKSymbolsandPunctuation: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x80-\x80]"> <d3:"[\x80-\xBF]">
    => prelude::Char::CJKSymbolsandPunctuation(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Hiragana: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x81-\x82]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Hiragana(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Katakana: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x82-\x83]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::Katakana(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Bopomofo: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x84-\x84]"> <d3:"[\x80-\xAF]">
    => prelude::Char::Bopomofo(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

HangulCompatibilityJamo: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x84-\x86]"> <d3:"[\xB0-\x8F]">
    => prelude::Char::HangulCompatibilityJamo(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Kanbun: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x86-\x86]"> <d3:"[\x90-\x9F]">
    => prelude::Char::Kanbun(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

BopomofoExtended: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x86-\x86]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::BopomofoExtended(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CJKStrokes: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x87-\x87]"> <d3:"[\x80-\xAF]">
    => prelude::Char::CJKStrokes(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

KatakanaPhoneticExtensions: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x87-\x87]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::KatakanaPhoneticExtensions(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

EnclosedCJKLettersandMonths: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x88-\x8B]"> <d3:"[\x80-\xBF]">
    => prelude::Char::EnclosedCJKLettersandMonths(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CJKCompatibility: prelude::Char = {
  <d1:"[\xE3-\xE3]"> <d2:"[\x8C-\x8F]"> <d3:"[\x80-\xBF]">
    => prelude::Char::CJKCompatibility(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CJKUnifiedIdeographsExtensionA: prelude::Char = {
  <d1:"[\xE3-\xE4]"> <d2:"[\x90-\xB6]"> <d3:"[\x80-\xBF]">
    => prelude::Char::CJKUnifiedIdeographsExtensionA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

YijingHexagramSymbols: prelude::Char = {
  <d1:"[\xE4-\xE4]"> <d2:"[\xB7-\xB7]"> <d3:"[\x80-\xBF]">
    => prelude::Char::YijingHexagramSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CJKUnifiedIdeographs: prelude::Char = {
  <d1:"[\xE4-\xE9]"> <d2:"[\xB8-\xBF]"> <d3:"[\x80-\xBF]">
    => prelude::Char::CJKUnifiedIdeographs(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

YiSyllables: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\x80-\x92]"> <d3:"[\x80-\x8F]">
    => prelude::Char::YiSyllables(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

YiRadicals: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\x92-\x93]"> <d3:"[\x90-\x8F]">
    => prelude::Char::YiRadicals(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Lisu: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\x93-\x93]"> <d3:"[\x90-\xBF]">
    => prelude::Char::Lisu(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Vai: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\x94-\x98]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Vai(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CyrillicExtendedB: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\x99-\x9A]"> <d3:"[\x80-\x9F]">
    => prelude::Char::CyrillicExtendedB(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Bamum: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\x9A-\x9B]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::Bamum(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

ModifierToneLetters: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\x9C-\x9C]"> <d3:"[\x80-\x9F]">
    => prelude::Char::ModifierToneLetters(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

LatinExtendedD: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\x9C-\x9F]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::LatinExtendedD(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

SylotiNagri: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA0-\xA0]"> <d3:"[\x80-\xAF]">
    => prelude::Char::SylotiNagri(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CommonIndicNumberForms: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA0-\xA0]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::CommonIndicNumberForms(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Phagspa: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA1-\xA1]"> <d3:"[\x80-\xBF]">
    => prelude::Char::Phagspa(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Saurashtra: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA2-\xA3]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Saurashtra(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

DevanagariExtended: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA3-\xA3]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::DevanagariExtended(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

KayahLi: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA4-\xA4]"> <d3:"[\x80-\xAF]">
    => prelude::Char::KayahLi(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Rejang: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA4-\xA5]"> <d3:"[\xB0-\x9F]">
    => prelude::Char::Rejang(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

HangulJamoExtendedA: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA5-\xA5]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::HangulJamoExtendedA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Javanese: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA6-\xA7]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Javanese(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

MyanmarExtendedB: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA7-\xA7]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::MyanmarExtendedB(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Cham: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA8-\xA9]"> <d3:"[\x80-\x9F]">
    => prelude::Char::Cham(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

MyanmarExtendedA: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xA9-\xA9]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::MyanmarExtendedA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

TaiViet: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xAA-\xAB]"> <d3:"[\x80-\x9F]">
    => prelude::Char::TaiViet(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

MeeteiMayekExtensions: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xAB-\xAB]"> <d3:"[\xA0-\xBF]">
    => prelude::Char::MeeteiMayekExtensions(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

EthiopicExtendedA: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xAC-\xAC]"> <d3:"[\x80-\xAF]">
    => prelude::Char::EthiopicExtendedA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

LatinExtendedE: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xAC-\xAD]"> <d3:"[\xB0-\xAF]">
    => prelude::Char::LatinExtendedE(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CherokeeSupplement: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xAD-\xAE]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::CherokeeSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

MeeteiMayek: prelude::Char = {
  <d1:"[\xEA-\xEA]"> <d2:"[\xAF-\xAF]"> <d3:"[\x80-\xBF]">
    => prelude::Char::MeeteiMayek(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

HangulSyllables: prelude::Char = {
  <d1:"[\xEA-\xED]"> <d2:"[\xB0-\x9E]"> <d3:"[\x80-\xAF]">
    => prelude::Char::HangulSyllables(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

HangulJamoExtendedB: prelude::Char = {
  <d1:"[\xED-\xED]"> <d2:"[\x9E-\x9F]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::HangulJamoExtendedB(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

HighSurrogates: prelude::Char = {
  <d1:"[\xED-\xED]"> <d2:"[\xA0-\xAD]"> <d3:"[\x80-\xBF]">
    => prelude::Char::HighSurrogates(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

HighPrivateUseSurrogates: prelude::Char = {
  <d1:"[\xED-\xED]"> <d2:"[\xAE-\xAF]"> <d3:"[\x80-\xBF]">
    => prelude::Char::HighPrivateUseSurrogates(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

LowSurrogates: prelude::Char = {
  <d1:"[\xED-\xED]"> <d2:"[\xB0-\xBF]"> <d3:"[\x80-\xBF]">
    => prelude::Char::LowSurrogates(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

PrivateUseArea: prelude::Char = {
  <d1:"[\xEE-\xEF]"> <d2:"[\x80-\xA3]"> <d3:"[\x80-\xBF]">
    => prelude::Char::PrivateUseArea(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CJKCompatibilityIdeographs: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xA4-\xAB]"> <d3:"[\x80-\xBF]">
    => prelude::Char::CJKCompatibilityIdeographs(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

AlphabeticPresentationForms: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xAC-\xAD]"> <d3:"[\x80-\x8F]">
    => prelude::Char::AlphabeticPresentationForms(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

ArabicPresentationFormsA: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xAD-\xB7]"> <d3:"[\x90-\xBF]">
    => prelude::Char::ArabicPresentationFormsA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

VariationSelectors: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xB8-\xB8]"> <d3:"[\x80-\x8F]">
    => prelude::Char::VariationSelectors(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

VerticalForms: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xB8-\xB8]"> <d3:"[\x90-\x9F]">
    => prelude::Char::VerticalForms(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CombiningHalfMarks: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xB8-\xB8]"> <d3:"[\xA0-\xAF]">
    => prelude::Char::CombiningHalfMarks(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

CJKCompatibilityForms: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xB8-\xB9]"> <d3:"[\xB0-\x8F]">
    => prelude::Char::CJKCompatibilityForms(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

SmallFormVariants: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xB9-\xB9]"> <d3:"[\x90-\xAF]">
    => prelude::Char::SmallFormVariants(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

ArabicPresentationFormsB: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xB9-\xBB]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::ArabicPresentationFormsB(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

HalfwidthandFullwidthForms: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xBC-\xBF]"> <d3:"[\x80-\xAF]">
    => prelude::Char::HalfwidthandFullwidthForms(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

Specials: prelude::Char = {
  <d1:"[\xEF-\xEF]"> <d2:"[\xBF-\xBF]"> <d3:"[\xB0-\xBF]">
    => prelude::Char::Specials(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0)
    ]
  ),
};

LinearBSyllabary: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x80-\x81]"> <d4:"[\x80-\xBF]">
    => prelude::Char::LinearBSyllabary(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

LinearBIdeograms: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x82-\x83]"> <d4:"[\x80-\xBF]">
    => prelude::Char::LinearBIdeograms(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

AegeanNumbers: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x84-\x84]"> <d4:"[\x80-\xBF]">
    => prelude::Char::AegeanNumbers(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

AncientGreekNumbers: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x85-\x86]"> <d4:"[\x80-\x8F]">
    => prelude::Char::AncientGreekNumbers(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

AncientSymbols: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x86-\x87]"> <d4:"[\x90-\x8F]">
    => prelude::Char::AncientSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

PhaistosDisc: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x87-\x87]"> <d4:"[\x90-\xBF]">
    => prelude::Char::PhaistosDisc(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Lycian: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x8A-\x8A]"> <d4:"[\x80-\x9F]">
    => prelude::Char::Lycian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Carian: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x8A-\x8B]"> <d4:"[\xA0-\x9F]">
    => prelude::Char::Carian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

CopticEpactNumbers: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x8B-\x8B]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::CopticEpactNumbers(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

OldItalic: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x8C-\x8C]"> <d4:"[\x80-\xAF]">
    => prelude::Char::OldItalic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Gothic: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x8C-\x8D]"> <d4:"[\xB0-\x8F]">
    => prelude::Char::Gothic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

OldPermic: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x8D-\x8D]"> <d4:"[\x90-\xBF]">
    => prelude::Char::OldPermic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Ugaritic: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x8E-\x8E]"> <d4:"[\x80-\x9F]">
    => prelude::Char::Ugaritic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

OldPersian: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x8E-\x8F]"> <d4:"[\xA0-\x9F]">
    => prelude::Char::OldPersian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Deseret: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x90-\x91]"> <d4:"[\x80-\x8F]">
    => prelude::Char::Deseret(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Shavian: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x91-\x91]"> <d4:"[\x90-\xBF]">
    => prelude::Char::Shavian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Osmanya: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x92-\x92]"> <d4:"[\x80-\xAF]">
    => prelude::Char::Osmanya(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Elbasan: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x94-\x94]"> <d4:"[\x80-\xAF]">
    => prelude::Char::Elbasan(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

CaucasianAlbanian: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x94-\x95]"> <d4:"[\xB0-\xAF]">
    => prelude::Char::CaucasianAlbanian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

LinearA: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\x98-\x9D]"> <d4:"[\x80-\xBF]">
    => prelude::Char::LinearA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

CypriotSyllabary: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA0-\xA0]"> <d4:"[\x80-\xBF]">
    => prelude::Char::CypriotSyllabary(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

ImperialAramaic: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA1-\xA1]"> <d4:"[\x80-\x9F]">
    => prelude::Char::ImperialAramaic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Palmyrene: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA1-\xA1]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::Palmyrene(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Nabataean: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA2-\xA2]"> <d4:"[\x80-\xAF]">
    => prelude::Char::Nabataean(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Hatran: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA3-\xA3]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::Hatran(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Phoenician: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA4-\xA4]"> <d4:"[\x80-\x9F]">
    => prelude::Char::Phoenician(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Lydian: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA4-\xA4]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::Lydian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

MeroiticHieroglyphs: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA6-\xA6]"> <d4:"[\x80-\x9F]">
    => prelude::Char::MeroiticHieroglyphs(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

MeroiticCursive: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA6-\xA7]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::MeroiticCursive(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Kharoshthi: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA8-\xA9]"> <d4:"[\x80-\x9F]">
    => prelude::Char::Kharoshthi(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

OldSouthArabian: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xA9-\xA9]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::OldSouthArabian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

OldNorthArabian: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xAA-\xAA]"> <d4:"[\x80-\x9F]">
    => prelude::Char::OldNorthArabian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Manichaean: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xAB-\xAB]"> <d4:"[\x80-\xBF]">
    => prelude::Char::Manichaean(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Avestan: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xAC-\xAC]"> <d4:"[\x80-\xBF]">
    => prelude::Char::Avestan(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

InscriptionalParthian: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xAD-\xAD]"> <d4:"[\x80-\x9F]">
    => prelude::Char::InscriptionalParthian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

InscriptionalPahlavi: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xAD-\xAD]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::InscriptionalPahlavi(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

PsalterPahlavi: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xAE-\xAE]"> <d4:"[\x80-\xAF]">
    => prelude::Char::PsalterPahlavi(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

OldTurkic: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xB0-\xB1]"> <d4:"[\x80-\x8F]">
    => prelude::Char::OldTurkic(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

OldHungarian: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xB2-\xB3]"> <d4:"[\x80-\xBF]">
    => prelude::Char::OldHungarian(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

RumiNumeralSymbols: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x90-\x90]"> <d3:"[\xB9-\xB9]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::RumiNumeralSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Brahmi: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x80-\x81]"> <d4:"[\x80-\xBF]">
    => prelude::Char::Brahmi(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Kaithi: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x82-\x83]"> <d4:"[\x80-\x8F]">
    => prelude::Char::Kaithi(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

SoraSompeng: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x83-\x83]"> <d4:"[\x90-\xBF]">
    => prelude::Char::SoraSompeng(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Chakma: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x84-\x85]"> <d4:"[\x80-\x8F]">
    => prelude::Char::Chakma(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Mahajani: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x85-\x85]"> <d4:"[\x90-\xBF]">
    => prelude::Char::Mahajani(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Sharada: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x86-\x87]"> <d4:"[\x80-\x9F]">
    => prelude::Char::Sharada(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

SinhalaArchaicNumbers: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x87-\x87]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::SinhalaArchaicNumbers(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Khojki: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x88-\x89]"> <d4:"[\x80-\x8F]">
    => prelude::Char::Khojki(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Multani: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x8A-\x8A]"> <d4:"[\x80-\xAF]">
    => prelude::Char::Multani(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Khudawadi: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x8A-\x8B]"> <d4:"[\xB0-\xBF]">
    => prelude::Char::Khudawadi(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Grantha: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x8C-\x8D]"> <d4:"[\x80-\xBF]">
    => prelude::Char::Grantha(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Tirhuta: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x92-\x93]"> <d4:"[\x80-\x9F]">
    => prelude::Char::Tirhuta(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Siddham: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x96-\x97]"> <d4:"[\x80-\xBF]">
    => prelude::Char::Siddham(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Modi: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x98-\x99]"> <d4:"[\x80-\x9F]">
    => prelude::Char::Modi(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Takri: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x9A-\x9B]"> <d4:"[\x80-\x8F]">
    => prelude::Char::Takri(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Ahom: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\x9C-\x9C]"> <d4:"[\x80-\xBF]">
    => prelude::Char::Ahom(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

WarangCiti: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\xA2-\xA3]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::WarangCiti(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

PauCinHau: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x91-\x91]"> <d3:"[\xAB-\xAB]"> <d4:"[\x80-\xBF]">
    => prelude::Char::PauCinHau(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Cuneiform: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x92-\x92]"> <d3:"[\x80-\x8F]"> <d4:"[\x80-\xBF]">
    => prelude::Char::Cuneiform(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

CuneiformNumbersandPunctuation: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x92-\x92]"> <d3:"[\x90-\x91]"> <d4:"[\x80-\xBF]">
    => prelude::Char::CuneiformNumbersandPunctuation(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

EarlyDynasticCuneiform: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x92-\x92]"> <d3:"[\x92-\x95]"> <d4:"[\x80-\x8F]">
    => prelude::Char::EarlyDynasticCuneiform(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

EgyptianHieroglyphs: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x93-\x93]"> <d3:"[\x80-\x90]"> <d4:"[\x80-\xAF]">
    => prelude::Char::EgyptianHieroglyphs(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

AnatolianHieroglyphs: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x94-\x94]"> <d3:"[\x90-\x99]"> <d4:"[\x80-\xBF]">
    => prelude::Char::AnatolianHieroglyphs(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

BamumSupplement: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x96-\x96]"> <d3:"[\xA0-\xA8]"> <d4:"[\x80-\xBF]">
    => prelude::Char::BamumSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Mro: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x96-\x96]"> <d3:"[\xA9-\xA9]"> <d4:"[\x80-\xAF]">
    => prelude::Char::Mro(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

BassaVah: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x96-\x96]"> <d3:"[\xAB-\xAB]"> <d4:"[\x90-\xBF]">
    => prelude::Char::BassaVah(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

PahawhHmong: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x96-\x96]"> <d3:"[\xAC-\xAE]"> <d4:"[\x80-\x8F]">
    => prelude::Char::PahawhHmong(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Miao: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x96-\x96]"> <d3:"[\xBC-\xBE]"> <d4:"[\x80-\x9F]">
    => prelude::Char::Miao(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

KanaSupplement: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9B-\x9B]"> <d3:"[\x80-\x83]"> <d4:"[\x80-\xBF]">
    => prelude::Char::KanaSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Duployan: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9B-\x9B]"> <d3:"[\xB0-\xB2]"> <d4:"[\x80-\x9F]">
    => prelude::Char::Duployan(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

ShorthandFormatControls: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9B-\x9B]"> <d3:"[\xB2-\xB2]"> <d4:"[\xA0-\xAF]">
    => prelude::Char::ShorthandFormatControls(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

ByzantineMusicalSymbols: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9D-\x9D]"> <d3:"[\x80-\x83]"> <d4:"[\x80-\xBF]">
    => prelude::Char::ByzantineMusicalSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

MusicalSymbols: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9D-\x9D]"> <d3:"[\x84-\x87]"> <d4:"[\x80-\xBF]">
    => prelude::Char::MusicalSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

AncientGreekMusicalNotation: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9D-\x9D]"> <d3:"[\x88-\x89]"> <d4:"[\x80-\x8F]">
    => prelude::Char::AncientGreekMusicalNotation(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

TaiXuanJingSymbols: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9D-\x9D]"> <d3:"[\x8C-\x8D]"> <d4:"[\x80-\x9F]">
    => prelude::Char::TaiXuanJingSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

CountingRodNumerals: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9D-\x9D]"> <d3:"[\x8D-\x8D]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::CountingRodNumerals(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

MathematicalAlphanumericSymbols: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9D-\x9D]"> <d3:"[\x90-\x9F]"> <d4:"[\x80-\xBF]">
    => prelude::Char::MathematicalAlphanumericSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

SuttonSignWriting: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9D-\x9D]"> <d3:"[\xA0-\xAA]"> <d4:"[\x80-\xAF]">
    => prelude::Char::SuttonSignWriting(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

MendeKikakui: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9E-\x9E]"> <d3:"[\xA0-\xA3]"> <d4:"[\x80-\x9F]">
    => prelude::Char::MendeKikakui(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

ArabicMathematicalAlphabeticSymbols: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9E-\x9E]"> <d3:"[\xB8-\xBB]"> <d4:"[\x80-\xBF]">
    => prelude::Char::ArabicMathematicalAlphabeticSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

MahjongTiles: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x80-\x80]"> <d4:"[\x80-\xAF]">
    => prelude::Char::MahjongTiles(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

DominoTiles: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x80-\x82]"> <d4:"[\xB0-\x9F]">
    => prelude::Char::DominoTiles(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

PlayingCards: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x82-\x83]"> <d4:"[\xA0-\xBF]">
    => prelude::Char::PlayingCards(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

EnclosedAlphanumericSupplement: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x84-\x87]"> <d4:"[\x80-\xBF]">
    => prelude::Char::EnclosedAlphanumericSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

EnclosedIdeographicSupplement: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x88-\x8B]"> <d4:"[\x80-\xBF]">
    => prelude::Char::EnclosedIdeographicSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

MiscellaneousSymbolsandPictographs: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x8C-\x97]"> <d4:"[\x80-\xBF]">
    => prelude::Char::MiscellaneousSymbolsandPictographs(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Emoticons: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x98-\x99]"> <d4:"[\x80-\x8F]">
    => prelude::Char::Emoticons(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

OrnamentalDingbats: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x99-\x99]"> <d4:"[\x90-\xBF]">
    => prelude::Char::OrnamentalDingbats(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

TransportandMapSymbols: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x9A-\x9B]"> <d4:"[\x80-\xBF]">
    => prelude::Char::TransportandMapSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

AlchemicalSymbols: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x9C-\x9D]"> <d4:"[\x80-\xBF]">
    => prelude::Char::AlchemicalSymbols(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

GeometricShapesExtended: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\x9E-\x9F]"> <d4:"[\x80-\xBF]">
    => prelude::Char::GeometricShapesExtended(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

SupplementalArrowsC: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\xA0-\xA3]"> <d4:"[\x80-\xBF]">
    => prelude::Char::SupplementalArrowsC(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

SupplementalSymbolsandPictographs: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\x9F-\x9F]"> <d3:"[\xA4-\xA7]"> <d4:"[\x80-\xBF]">
    => prelude::Char::SupplementalSymbolsandPictographs(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

CjkUnifiedIdeographsExtensionB: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\xA0-\xAA]"> <d3:"[\x80-\x9B]"> <d4:"[\x80-\x9F]">
    => prelude::Char::CjkUnifiedIdeographsExtensionB(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

CjkUnifiedIdeographsExtensionC: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\xAA-\xAB]"> <d3:"[\x9C-\x9C]"> <d4:"[\x80-\xBF]">
    => prelude::Char::CjkUnifiedIdeographsExtensionC(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

CjkUnifiedIdeographsExtensionD: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\xAB-\xAB]"> <d3:"[\x9D-\xA0]"> <d4:"[\x80-\x9F]">
    => prelude::Char::CjkUnifiedIdeographsExtensionD(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

CjkUnifiedIdeographsExtensionE: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\xAB-\xAC]"> <d3:"[\xA0-\xBA]"> <d4:"[\xA0-\xAF]">
    => prelude::Char::CjkUnifiedIdeographsExtensionE(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

CjkCompatibilityIdeographsSupplement: prelude::Char = {
  <d1:"[\xF0-\xF0]"> <d2:"[\xAF-\xAF]"> <d3:"[\xA0-\xA8]"> <d4:"[\x80-\x9F]">
    => prelude::Char::CjkCompatibilityIdeographsSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Tags: prelude::Char = {
  <d1:"[\xF3-\xF3]"> <d2:"[\xA0-\xA0]"> <d3:"[\x80-\x81]"> <d4:"[\x80-\xBF]">
    => prelude::Char::Tags(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

VariationSelectorsSupplement: prelude::Char = {
  <d1:"[\xF3-\xF3]"> <d2:"[\xA0-\xA0]"> <d3:"[\x84-\x87]"> <d4:"[\x80-\xAF]">
    => prelude::Char::VariationSelectorsSupplement(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

SupplementaryPrivateUseAreaA: prelude::Char = {
  <d1:"[\xF3-\xF3]"> <d2:"[\xB0-\xBF]"> <d3:"[\x80-\xBF]"> <d4:"[\x80-\xBF]">
    => prelude::Char::SupplementaryPrivateUseAreaA(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

SupplementaryPrivateUseAreaB: prelude::Char = {
  <d1:"[\xF4-\xF4]"> <d2:"[\x80-\x8F]"> <d3:"[\x80-\xBF]"> <d4:"[\x80-\xBF]">
    => prelude::Char::SupplementaryPrivateUseAreaB(
    [
      libc::c_uchar::from_str(d1).unwrap_or(0),
      libc::c_uchar::from_str(d2).unwrap_or(0),
      libc::c_uchar::from_str(d3).unwrap_or(0),
      libc::c_uchar::from_str(d4).unwrap_or(0)
    ]
  ),
};

Utf8: prelude::Char = {
  <BasicLatin> => <>,
  <Latin1Supplement> => <>,
  <LatinExtendedA> => <>,
  <LatinExtendedB> => <>,
  <IpaExtensions> => <>,
  <SpacingModifierLetters> => <>,
  <CombiningDiacriticalMarks> => <>,
  <GreekandCoptic> => <>,
  <Cyrillic> => <>,
  <CyrillicSupplement> => <>,
  <Armenian> => <>,
  <Hebrew> => <>,
  <Arabic> => <>,
  <Syriac> => <>,
  <ArabicSupplement> => <>,
  <Thaana> => <>,
  <NKo> => <>,
  <Samaritan> => <>,
  <Mandaic> => <>,
  <ArabicExtendedA> => <>,
  <Devanagari> => <>,
  <Bengali> => <>,
  <Gurmukhi> => <>,
  <Gujarati> => <>,
  <Oriya> => <>,
  <Tamil> => <>,
  <Telugu> => <>,
  <Kannada> => <>,
  <Malayalam> => <>,
  <Sinhala> => <>,
  <Thai> => <>,
  <Lao> => <>,
  <Tibetan> => <>,
  <Myanmar> => <>,
  <Georgian> => <>,
  <HangulJamo> => <>,
  <Ethiopic> => <>,
  <EthiopicSupplement> => <>,
  <Cherokee> => <>,
  <UnifiedCanadianAboriginalSyllabics> => <>,
  <Ogham> => <>,
  <Runic> => <>,
  <Tagalog> => <>,
  <Hanunoo> => <>,
  <Buhid> => <>,
  <Tagbanwa> => <>,
  <Khmer> => <>,
  <Mongolian> => <>,
  <UnifiedCanadianAboriginalSyllabicsExtended> => <>,
  <Limbu> => <>,
  <TaiLe> => <>,
  <NewTaiLue> => <>,
  <KhmerSymbols> => <>,
  <Buginese> => <>,
  <TaiTham> => <>,
  <CombiningDiacriticalMarksExtended> => <>,
  <Balinese> => <>,
  <Sundanese> => <>,
  <Batak> => <>,
  <Lepcha> => <>,
  <OlChiki> => <>,
  <SundaneseSupplement> => <>,
  <VedicExtensions> => <>,
  <PhoneticExtensions> => <>,
  <PhoneticExtensionsSupplement> => <>,
  <CombiningDiacriticalMarksSupplement> => <>,
  <LatinExtendedAdditional> => <>,
  <GreekExtended> => <>,
  <GeneralPunctuation> => <>,
  <SuperscriptsandSubscripts> => <>,
  <CurrencySymbols> => <>,
  <CombiningDiacriticalMarksforSymbols> => <>,
  <LetterlikeSymbols> => <>,
  <NumberForms> => <>,
  <Arrows> => <>,
  <MathematicalOperators> => <>,
  <MiscellaneousTechnical> => <>,
  <ControlPictures> => <>,
  <OpticalCharacterRecognition> => <>,
  <EnclosedAlphanumerics> => <>,
  <BoxDrawing> => <>,
  <BlockElements> => <>,
  <GeometricShapes> => <>,
  <MiscellaneousSymbols> => <>,
  <Dingbats> => <>,
  <MiscellaneousMathematicalSymbolsA> => <>,
  <SupplementalArrowsA> => <>,
  <BraillePatterns> => <>,
  <SupplementalArrowsB> => <>,
  <MiscellaneousMathematicalSymbolsB> => <>,
  <SupplementalMathematicalOperators> => <>,
  <MiscellaneousSymbolsandArrows> => <>,
  <Glagolitic> => <>,
  <LatinExtendedC> => <>,
  <Coptic> => <>,
  <GeorgianSupplement> => <>,
  <Tifinagh> => <>,
  <EthiopicExtended> => <>,
  <CyrillicExtendedA> => <>,
  <SupplementalPunctuation> => <>,
  <CJKRadicalsSupplement> => <>,
  <KangxiRadicals> => <>,
  <IdeographicDescriptionCharacters> => <>,
  <CJKSymbolsandPunctuation> => <>,
  <Hiragana> => <>,
  <Katakana> => <>,
  <Bopomofo> => <>,
  <HangulCompatibilityJamo> => <>,
  <Kanbun> => <>,
  <BopomofoExtended> => <>,
  <CJKStrokes> => <>,
  <KatakanaPhoneticExtensions> => <>,
  <EnclosedCJKLettersandMonths> => <>,
  <CJKCompatibility> => <>,
  <CJKUnifiedIdeographsExtensionA> => <>,
  <YijingHexagramSymbols> => <>,
  <CJKUnifiedIdeographs> => <>,
  <YiSyllables> => <>,
  <YiRadicals> => <>,
  <Lisu> => <>,
  <Vai> => <>,
  <CyrillicExtendedB> => <>,
  <Bamum> => <>,
  <ModifierToneLetters> => <>,
  <LatinExtendedD> => <>,
  <SylotiNagri> => <>,
  <CommonIndicNumberForms> => <>,
  <Phagspa> => <>,
  <Saurashtra> => <>,
  <DevanagariExtended> => <>,
  <KayahLi> => <>,
  <Rejang> => <>,
  <HangulJamoExtendedA> => <>,
  <Javanese> => <>,
  <MyanmarExtendedB> => <>,
  <Cham> => <>,
  <MyanmarExtendedA> => <>,
  <TaiViet> => <>,
  <MeeteiMayekExtensions> => <>,
  <EthiopicExtendedA> => <>,
  <LatinExtendedE> => <>,
  <CherokeeSupplement> => <>,
  <MeeteiMayek> => <>,
  <HangulSyllables> => <>,
  <HangulJamoExtendedB> => <>,
  <HighSurrogates> => <>,
  <HighPrivateUseSurrogates> => <>,
  <LowSurrogates> => <>,
  <PrivateUseArea> => <>,
  <CJKCompatibilityIdeographs> => <>,
  <AlphabeticPresentationForms> => <>,
  <ArabicPresentationFormsA> => <>,
  <VariationSelectors> => <>,
  <VerticalForms> => <>,
  <CombiningHalfMarks> => <>,
  <CJKCompatibilityForms> => <>,
  <SmallFormVariants> => <>,
  <ArabicPresentationFormsB> => <>,
  <HalfwidthandFullwidthForms> => <>,
  <Specials> => <>,
  <LinearBSyllabary> => <>,
  <LinearBIdeograms> => <>,
  <AegeanNumbers> => <>,
  <AncientGreekNumbers> => <>,
  <AncientSymbols> => <>,
  <PhaistosDisc> => <>,
  <Lycian> => <>,
  <Carian> => <>,
  <CopticEpactNumbers> => <>,
  <OldItalic> => <>,
  <Gothic> => <>,
  <OldPermic> => <>,
  <Ugaritic> => <>,
  <OldPersian> => <>,
  <Deseret> => <>,
  <Shavian> => <>,
  <Osmanya> => <>,
  <Elbasan> => <>,
  <CaucasianAlbanian> => <>,
  <LinearA> => <>,
  <CypriotSyllabary> => <>,
  <ImperialAramaic> => <>,
  <Palmyrene> => <>,
  <Nabataean> => <>,
  <Hatran> => <>,
  <Phoenician> => <>,
  <Lydian> => <>,
  <MeroiticHieroglyphs> => <>,
  <MeroiticCursive> => <>,
  <Kharoshthi> => <>,
  <OldSouthArabian> => <>,
  <OldNorthArabian> => <>,
  <Manichaean> => <>,
  <Avestan> => <>,
  <InscriptionalParthian> => <>,
  <InscriptionalPahlavi> => <>,
  <PsalterPahlavi> => <>,
  <OldTurkic> => <>,
  <OldHungarian> => <>,
  <RumiNumeralSymbols> => <>,
  <Brahmi> => <>,
  <Kaithi> => <>,
  <SoraSompeng> => <>,
  <Chakma> => <>,
  <Mahajani> => <>,
  <Sharada> => <>,
  <SinhalaArchaicNumbers> => <>,
  <Khojki> => <>,
  <Multani> => <>,
  <Khudawadi> => <>,
  <Grantha> => <>,
  <Tirhuta> => <>,
  <Siddham> => <>,
  <Modi> => <>,
  <Takri> => <>,
  <Ahom> => <>,
  <WarangCiti> => <>,
  <PauCinHau> => <>,
  <Cuneiform> => <>,
  <CuneiformNumbersandPunctuation> => <>,
  <EarlyDynasticCuneiform> => <>,
  <EgyptianHieroglyphs> => <>,
  <AnatolianHieroglyphs> => <>,
  <BamumSupplement> => <>,
  <Mro> => <>,
  <BassaVah> => <>,
  <PahawhHmong> => <>,
  <Miao> => <>,
  <KanaSupplement> => <>,
  <Duployan> => <>,
  <ShorthandFormatControls> => <>,
  <ByzantineMusicalSymbols> => <>,
  <MusicalSymbols> => <>,
  <AncientGreekMusicalNotation> => <>,
  <TaiXuanJingSymbols> => <>,
  <CountingRodNumerals> => <>,
  <MathematicalAlphanumericSymbols> => <>,
  <SuttonSignWriting> => <>,
  <MendeKikakui> => <>,
  <ArabicMathematicalAlphabeticSymbols> => <>,
  <MahjongTiles> => <>,
  <DominoTiles> => <>,
  <PlayingCards> => <>,
  <EnclosedAlphanumericSupplement> => <>,
  <EnclosedIdeographicSupplement> => <>,
  <MiscellaneousSymbolsandPictographs> => <>,
  <Emoticons> => <>,
  <OrnamentalDingbats> => <>,
  <TransportandMapSymbols> => <>,
  <AlchemicalSymbols> => <>,
  <GeometricShapesExtended> => <>,
  <SupplementalArrowsC> => <>,
  <SupplementalSymbolsandPictographs> => <>,
  <CjkUnifiedIdeographsExtensionB> => <>,
  <CjkUnifiedIdeographsExtensionC> => <>,
  <CjkUnifiedIdeographsExtensionD> => <>,
  <CjkUnifiedIdeographsExtensionE> => <>,
  <CjkCompatibilityIdeographsSupplement> => <>,
  <Tags> => <>,
  <VariationSelectorsSupplement> => <>,
  <SupplementaryPrivateUseAreaA> => <>,
  <SupplementaryPrivateUseAreaB> => <>,
};

Function: prelude::Key = {
  "\x1BOP" => prelude::Key::F(1),
  "\x1BOQ" => prelude::Key::F(2),
  "\x1BOR" => prelude::Key::F(3),
  "\x1BOS" => prelude::Key::F(4),
  "\x1B[15~" => prelude::Key::F(5),
  "\x1B[17~" => prelude::Key::F(6),
  "\x1B[18~" => prelude::Key::F(7),
  "\x1B[19~" => prelude::Key::F(8),
  "\x1B[20~" => prelude::Key::F(9),
  "\x1B[21~" => prelude::Key::F(10),
  "\x1B[23~" => prelude::Key::F(11),
  "\x1B[24~" => prelude::Key::F(12),
  "\x1B[1;2P" => prelude::Key::F(13),
  "\x1B[1;2Q" => prelude::Key::F(14),
  "\x1B[1;2R" => prelude::Key::F(15),
  "\x1B[1;2S" => prelude::Key::F(16),
};

Editing: prelude::Key = {
  "\t" => prelude::Key::Tab,
  "\x7F" => prelude::Key::Backspace,
  "\n?\r?\n\r" => prelude::Key::Enter,
  "\x1B[3~" => prelude::Key::Delete,
};

Navigation: prelude::Key = {
  "\x1B" => prelude::Key::Esc,
  "\x1B[5~" => prelude::Key::PageUp,
  "\x1B[6~" => prelude::Key::PageDown,
  "\x1B[A" => prelude::Key::Up,
  "\x1B[B" => prelude::Key::Down,
  "\x1B[C" => prelude::Key::Right,
  "\x1B[D" => prelude::Key::Left,
  "\x1B[F" => prelude::Key::End,

  "\x1B[1;2A" => prelude::Key::ShiftUp,
  "\x1B[1;2B" => prelude::Key::ShiftDown,
  "\x1B[1;2C" => prelude::Key::ShiftRight,
  "\x1B[1;2D" => prelude::Key::ShiftLeft,

  "\x1B[1;9A" => prelude::Key::AltUp,
  "\x1B[1;9B" => prelude::Key::AltDown,
  "\x1B[1;9C" => prelude::Key::AltRight,
  "\x1B[1;9D" => prelude::Key::AltLeft,

  "\x1B[1;5A" => prelude::Key::CtrlUp,
  "\x1B[1;5B" => prelude::Key::CtrlDown,
  "\x1B[1;5C" => prelude::Key::CtrlRight,
  "\x1B[1;5D" => prelude::Key::CtrlLeft,

  "\x1B[1;10A" => prelude::Key::AltShiftUp,
  "\x1B[1;10B" => prelude::Key::AltShiftDown,
  "\x1B[1;10C" => prelude::Key::AltShiftRight,
  "\x1B[1;10D" => prelude::Key::AltShiftLeft,

  "\x1B[1;6A" => prelude::Key::CtrlShiftUp,
  "\x1B[1;6B" => prelude::Key::CtrlShiftDown,
  "\x1B[1;6C" => prelude::Key::CtrlShiftRight,
  "\x1B[1;6D" => prelude::Key::CtrlShiftLeft,
};

Key: prelude::Key = {
  <Navigation> => <>,
  <Editing> => <>,
  <Function> => <>,
  <Utf8> => prelude::Key::Utf8(<>),
};

Mouse: prelude::Mouse = {
  ///Click
  <"[\x00]"> => prelude::Mouse::Left,
  <"[\x01]"> => prelude::Mouse::Wheel,
  <"[\x02]"> => prelude::Mouse::Right,
  <"[\x40]"> => prelude::Mouse::WheelUp,
  <"[\x41]"> => prelude::Mouse::WheelDown,

  ///Drag
  <"[\x20]"> => prelude::Mouse::LeftDrag,
  <"[\x21]"> => prelude::Mouse::WheelDrag,
  <"[\x22]"> => prelude::Mouse::RightDrag,

  ///Shift Click
  <"[\x04]"> => prelude::Mouse::ShiftLeft,
  <"[\x05]"> => prelude::Mouse::ShiftWheel,
  <"[\x06]"> => prelude::Mouse::ShiftRight,

  ///Shift Drag
  <"[\x24]"> => prelude::Mouse::ShiftLeftDrag,
  <"[\x25]"> => prelude::Mouse::ShiftWheelDrag,
  <"[\x26]"> => prelude::Mouse::ShiftRightDrag,

  ///Control Click
  <"[\x10]"> => prelude::Mouse::CtrlLeft,
  <"[\x11]"> => prelude::Mouse::CtrlWheel,
  <"[\x12]"> => prelude::Mouse::CtrlRight,
  <"[\x50]"> => prelude::Mouse::CtrlWheelUp,
  <"[\x51]"> => prelude::Mouse::CtrlWheelDown,

  ///Control Drag
  <"[\x30]"> => prelude::Mouse::CtrlLeftDrag,
  <"[\x31]"> => prelude::Mouse::CtrlWheelDrag,
  <"[\x32]"> => prelude::Mouse::CtrlRightDrag,

  ///Control Shift Click
  <"[\x14]"> => prelude::Mouse::ShiftCtrlLeft,
  <"[\x15]"> => prelude::Mouse::ShiftCtrlWheel,
  <"[\x16]"> => prelude::Mouse::ShiftCtrlRight,

  ///Control Shift Drag
  <"[\x34]"> => prelude::Mouse::ShiftCtrlLeftDrag,
  <"[\x35]"> => prelude::Mouse::ShiftCtrlWheelDrag,
  <"[\x36]"> => prelude::Mouse::ShiftCtrlRightDrag,

  ///Command Click
  <"[\x08]"> => prelude::Mouse::CmdLeft,
  <"[\x09]"> => prelude::Mouse::CmdWheel,
  <"[\x0A]"> => prelude::Mouse::CmdRight,
  <"[\x48]"> => prelude::Mouse::CmdWheelUp,
  <"[\x49]"> => prelude::Mouse::CmdWheelDown,

  ///Command Drag
  <"[\x28]"> => prelude::Mouse::CmdLeftDrag,
  <"[\x29]"> => prelude::Mouse::CmdWheelDrag,
  <"[\x2A]"> => prelude::Mouse::CmdRightDrag,

  ///Command Shift Click
  <"[\x0C]"> => prelude::Mouse::CmdShiftLeft,
  <"[\x0D]"> => prelude::Mouse::CmdShiftWheel,
  <"[\x0E]"> => prelude::Mouse::CmdShiftRight,

  ///Command Shift Drag
  <"[\x2C]"> => prelude::Mouse::CmdShiftLeftDrag,
  <"[\x2D]"> => prelude::Mouse::CmdShiftWheelDrag,
  <"[\x2E]"> => prelude::Mouse::CmdShiftRightDrag,

  ///Command Control Click
  <"[\x18]"> => prelude::Mouse::CmdCtrlLeft,
  <"[\x19]"> => prelude::Mouse::CmdCtrlWheel,
  <"[\x1A]"> => prelude::Mouse::CmdCtrlRight,
  <"[\x58]"> => prelude::Mouse::CmdWheelUp,
  <"[\x59]"> => prelude::Mouse::CmdWheelDown,

  ///Command Control Drag
  <"[\x38]"> => prelude::Mouse::CmdCtrlLeftDrag,
  <"[\x39]"> => prelude::Mouse::CmdCtrlWheelDrag,
  <"[\x3A]"> => prelude::Mouse::CmdCtrlRightDrag,

  ///Command Shift Control Click
  <"[\x1C]"> => prelude::Mouse::CmdShiftCtrlLeft,
  <"[\x1D]"> => prelude::Mouse::CmdShiftCtrlWheel,
  <"[\x1E]"> => prelude::Mouse::CmdShiftCtrlRight,

  ///Command Shift Control Drag
  <"[\x3C]"> => prelude::Mouse::CmdShiftCtrlLeftDrag,
  <"[\x3E]"> => prelude::Mouse::CmdShiftCtrlWheelDrag,
  <"[\x3F]"> => prelude::Mouse::CmdShiftCtrlRightDrag,
};

pub Operate: prelude::Operate = {
  <Key> => prelude::Operate::Key(<>),
  "\x1B[<" <m:Mouse> ";" <x:Num> ";" <y:Num> "m" => prelude::Operate::Mouse(m, x, y),
  "\x1B[<" <m:Mouse> ";" <x:Num> ";" <y:Num> "M" => prelude::Operate::Mouse(m, x, y),
};
